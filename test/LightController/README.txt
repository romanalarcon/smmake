--------------------
SMMAKE Usage example
--------------------

1. Introduction
---------------

This example shows a very simple Light Controller created using SMMAKE. The specification is by far small but helps to understand the language. 

In this sample, two states and two events describe what the state machine must do. The SMMAKE tool generates C++, Java or Objective-C code 
along with a GraphViz dot specification to show a graphical representation of the machine (see file GraphViz-LightController-graph.png).

The rest of the code has to be provided by the user.


2. Specification
----------------

The following is the specification of the Light Controller:

      STATEMACHINE LightController:
      
          # This is the list of states
          STATES:
      
              STATE LampOff: 
                  EVENTS: 
                      turnOn : MOVETO LampOn RUN lampTurnedOn;
                      turnOff: STAY RUN lampAlreadyTurnedOff;
              END
      
              STATE LampOn: 
                  EVENTS: 
                      turnOff: MOVETO LampOff RUN lampTurnedOff;
                      # --- Injecting "turnOn" in this state will cause an error to be 
                      # --- reported and printed on the standard ouput
              END
      
          END
      
      END

Some comments on this specification:

  - MOVETO indicates the state the machine must move to when the event is injected. 
  - STAY indicated that no movement is required (a loop on the state).
  - RUN is optional (for example, we could write "turnOff: MOVETO LampOff;").

Let's suppose that this specification is in file "LightController.fsm". We'll use this name in the following section. 


3. How to run the tool
----------------------

We write the following on the console (assuming the FSM file is in the same directory as the executable):

   # ./smmake -o cpp LightController.fsm

This will generate the code of the machine. The user has to write a main function (and other files) as described in the following section.


4. The main.cpp file
--------------------

This is the file conaining the main function for this example. Of course, the code could be broken in more files, and the style is not perfect, but this is just to illustrate how to use the machine:


      #include <iostream>
      #include "LightControllerStateDelegate.h"
      #include "LightControllerBaseState.h"
      #include "LightControllerConfigurator.h"
      #include "LightControllerLampOff.h"
      
      using LightControllerNamespace::LightControllerStateDelegate;
      using LightControllerNamespace::LightControllerBaseState;
      using LightControllerNamespace::Parameters;
      using LightControllerNamespace::LightControllerConfigurator;
      using LightControllerNamespace::LightControllerLampOff;
      
            
      class MyLightController: public LightControllerStateDelegate
      {
      private:
          LightControllerBaseState * current;
      
      private:
          virtual void lampTurnedOff(const Parameters& parameters) 
          {
              std::cout << "Ligth turned off..." << std::endl;
          }
      
          virtual void lampTurnedOn(const Parameters& parameters) 
          {
              std::cout << "Ligth turned on... " << std::endl;
          }
      
          virtual void lampAlreadyTurnedOff(const Parameters& parameters) 
          {
              std::cout << "Hey! Lamp is already turned off!" << std::endl;
          }
      
          virtual void lampAlreadyTurnedOn(const Parameters& parameters)
          {
              std::cout << "Hey! Lamp is already turned on!" << std::endl;
          }
      
          virtual void LightControllerChangeState(LightControllerBaseState * newState) 
          {
              current = newState;
          };
      
          
      public:
          MyLightController()
          {
              current = LightControllerLampOff::sharedInstance();
              LightControllerConfigurator::sharedInstance()->setAllStatesDelegate(this);
          }
       
          void turnLightOn()
          {
              current->turnOn();
          }    
      
          void turnLightOff()
          {
              current->turnOff();
          }
      };
      
      
      int main(int argc, const char * argv[])
      {
          MyLightController lightController;
      
          lightController.turnLightOn();
          lightController.turnLightOn();
          lightController.turnLightOff();
          lightController.turnLightOn();
          lightController.turnLightOff();
          lightController.turnLightOff();
       
          return 0;
      }

This code must be compiled with the rest of the files generated by SMMAKE. The names of namespaces, files and classes generated by the tool depend on the name given in the first line of the specification (in this case "LightController").

The LightControllerConfigurator class is used to let all the states have MyLightController as delegate.

5. Running the code
-------------------

When running the code the application shows the following:

      # ./lightController
      Ligth turned on... 
      Event 'turnOn' not implemented in state 'LightControllerLampOn'.
      Ligth turned off...
      Ligth turned on... 
      Ligth turned off...
      Hey! Lamp is already turned off!
      # 

